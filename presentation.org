#+STARTUP: showeverything
#+OPTIONS: ^:{}

#+OPTIONS: reveal_title_slide:nil
#+OPTIONS: reveal_slide_number:nil
#+OPTIONS: reveal_progress
#+OPTIONS: num:nil 
#+REVEAL_HLEVEL:1
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_THEME: black
#+REVEAL_TRANS: none

* solid

** solid
- SRP (single responsibility principle)
- OPC (open close principle)
- LSP (liskov substitution principle)
- ISP (interface segregation principle)
- DIP (dependency inversion principle)

** what is it good for?
- fundamental principles of softwaredesigns
- common sense

** why should you care?
you can solve problems without knowing these principles

** heuristic
file:labyrinth.gif

#+BEGIN_NOTES
Bezeichnet die Kunst, mit begrenztem Wissen und wenig Zeit zu guten Lösungen zu kommen.
Für die Lösung eines Problems in Software gibt es unendlich viele Möglichkeiten, aber nicht alle sind gleich gut.
Die Prinzipien helfen uns dabei unmögliche und schlechte Lösungen auszuschließen.
Sie sind quasi wie Wegweiser durch ein Labyrinth.
#+END_NOTES

** file:treppe_gegen_wand.jpg

** file:treppe_bei_draeger.jpg

* single responsibility
one module, one responsibility
module = package, file, class, method

** file:srp_hacker.jpg
#+BEGIN_NOTES
Hackerreflex unterdrücken!!!
Nachdenken!
Bei jeder neuen Klasse als erstes einen Kommentar, der die Verantwortlichkeit beschreibt!
Vielleicht brauche ich die Klasse auch gar nicht!
Design zeichnen (muss nicht UML sein)
#+END_NOTES

** responsibilities
#+BEGIN_SRC plantuml :file srp_01.png
class addressbook {
      +add()
      +remove()
      +compress()
      +decompress()
}

note right of addressbook
    maintains a list of addresses
    which can be added or removed and
    allows to compress/decompress
    the whole collection
end note

#+END_SRC

#+RESULTS:
[[file:srp_01.png]]

** responsibilities
#+BEGIN_SRC plantuml :file srp_02.png
class addressbook {
      +add()
      +remove()
}

class addressbook_compressor {
      +compress()
      +decompress()
}

addressbook_compressor --> addressbook

note bottom of addressbook
    maintains a list of addresses
    which can be added or removed
end note

note bottom of addressbook_compressor
    compress/decompress
    the whole collection
end note

#+END_SRC

#+RESULTS:
[[file:srp_02.png]]

** srp violations
-  how easy it is to find a catchy name for the module?
- are the ands or ors in the comment?
- module has to be changed for more than one reason?
- low cohesion?

** cohesion
#+BEGIN_SRC plantuml :file cohesion_01.png
class address

class rar_compressor

class addressbook

addressbook --> address
addressbook --> rar_compressor

note left of addressbook
    m_addresses.add(addr);
    m_addresses.remove(addr);
end note

note right of addressbook
    m_compressor.compress();
    m_compressor.decompress();
end note

#+END_SRC

#+RESULTS:
[[file:cohesion_01.png]]

#+BEGIN_NOTES
Werden alle Member in allen Methoden verwendet?

Verantwortlichkeit – schwammiger Begriff
Kohäsion – überprüfbar (ursprünglich hieß Prinzip Kohäsion (Tom De Marco))

100% SRP – prozedualer Code (toString, toHtml, toCsv, …)
#+END_NOTES

** coherent unit
#+BEGIN_SRC plantuml :file cohesion_02.png
interface startable {
    +start()
}

interface stopable {
    +stop()
}
#+END_SRC

#+RESULTS:
[[file:cohesion_02.png]]

#+BEGIN_NOTES
Kein SRP, da start und stop zusammengehören (eine hohärente Gruppe bilden)
#+END_NOTES

* interface segregation
client should not depend on details not needed

** cohesion
#+BEGIN_SRC plantuml :file cohesion_03.png
interface addressbook {
    +add()
    +remove()
    +compress()
    +decompress()
}

class compress_controler

class mail_client

compress_controler --> addressbook
mail_client --> addressbook

note left of compress_controler
    m_addressbook.compress()
    m_addressbook.decompress()
end note

note right of mail_client
    m_addressbook.add(addr)
    m_addressbook.remove(addr)
end note
#+END_SRC

#+RESULTS:
[[file:cohesion_03.png]]

#+BEGIN_NOTES
Kohäsion bezieht sich auf die Anzahl der Schnitstellen die von einem Klienten benutzt werden.
Benutzt der Klient alle Schnittstellen ist die Kohäsion hoch, ansonsten niedrig.
#+END_NOTES

** cohesion
#+BEGIN_SRC plantuml :file cohesion_04.png
interface addressbook {
    +add()
    +remove()
}

interface compressable {
    +compress()
    +decompress()
}

class compress_controler

class mail_client

compress_controler --> compressable
mail_client --> addressbook

note left of compress_controler
    m_addressbook.compress()
    m_addressbook.decompress()
end note

note right of mail_client
    m_addressbook.add(addr)
    m_addressbook.remove(addr)
end note
#+END_SRC

#+RESULTS:
[[file:cohesion_04.png]]

#+BEGIN_NOTES
Geringere Abhängigkeiten
Losere Kopplung

C++ hält sich nicht dran. Privates sind im Header!
#+END_NOTES

** realizing srp with isp
#+BEGIN_SRC plantuml :file srp_with_isp.png
interface addressbook {
    +add()
    +remove()
}

interface compressable {
    +compress()
    +decompress()
}

class addressbook_impl

compressable <|-- addressbook_impl
addressbook <|-- addressbook_impl
#+END_SRC

#+RESULTS:
[[file:srp_with_isp.png]]

#+BEGIN_NOTES
Schnittstelle ist wichtiger als Implementierung
C++ Interfaces private implementieren
#+END_NOTES

* open close
opened for extension
closed for change

** open close
opened:
the behavior of a module can be extended/changed ...

closed:
... without touching the current code of the module

** open close
#+BEGIN_SRC plantuml :file ocp_01.png
class addressbook_compressor {
    +compress()
    +decompress()
}
#+END_SRC

#+RESULTS:
[[file:ocp_01.png]]

#+BEGIN_SRC C++
  void addressbook_compressor::compress(format f) {
      switch(f) {
      case format::zip:
          ...
      case format::rar:
          ...
      }
  }
#+END_SRC

#+BEGIN_NOTES
Wo ist das Problem?
AddressbookCompressor muss immer geändert werden, wenn ein neuer Kompr. Algo. Implementiert werden soll.
#+END_NOTES

** open close
#+BEGIN_SRC plantuml :file ocp_02.png
class addressbook_compressor {
    +compress()
    +decompress()
}

interface compression {
    +{abstract} compress()
    +{abstract} decompress()
}

class rar
class zip

compression <|-- rar
compression <|-- zip
addressbook_compressor --> compression
#+END_SRC

#+RESULTS:
[[file:ocp_02.png]]

#+BEGIN_SRC C++
  void addressbook_compressor::compress(format f) {
      m_compressor.compress();
  }
#+END_SRC

#+BEGIN_NOTES
Identifiziere das was sich ändert, kapsel es, zieh es aus dem Modul raus
Die konkrete Ausprägung ist flexibel,
Weil wir auf diese Schnittstelle programmieren

Schnittstelle meint nicht unbedingt Interface
Siehe HSM (Schniffstelle ein Enum)
Siehe STL (Kontairerzugriff über Iteratoren, Algorithmen Schnittstellen durch Funktor)

100% nicht möglich – Stellen identifizieren wo Geschlossenheit erwünscht ist
OCP widerspricht YAGNIN
#+END_NOTES

** opc violations
- switch/case/default
- if/else
- high frequency of change in module

#+BEGIN_NOTES
Switch/case u. if/else erhöhen kognitive Last.
Je weniger davon, desto besser. -> am Besten gar keine
default? -> ignorieren?, log?, exception? => am Besten es gibt gar keinen default
#+END_NOTES

* dependency inversion
high- and low-level modules should depend on abstractions

** dependency inversion
#+BEGIN_SRC plantuml :file dip_01.png
class mail_client
class compress_controller
class addressbook_compressor
class mail_compressor
class archive_compressor

mail_client --> compress_controller
compress_controller --> addressbook_compressor
compress_controller --> mail_compressor
compress_controller --> archive_compressor
#+END_SRC

#+RESULTS:
[[file:dip_01.png]]

#+BEGIN_NOTES
Wir sind es gewohnt Anforderungen runterzubrechen.
Das ist nicht immer sinnvoll, weil es zu vielen Kopplungen zu konkreten Klassen führt.
#+END_NOTES

** abstraction
#+BEGIN_SRC plantuml :file dip_02.png
class mail_client
class compress_controller
interface compressable
class addressbook_compressor
class mail_compressor
class archive_compressor

mail_client --> compress_controller
compress_controller --> compressable
compressable <|-- addressbook_compressor
compressable <|-- mail_compressor
compressable <|-- archive_compressor
#+END_SRC

#+RESULTS:
[[file:dip_02.png]]

#+BEGIN_NOTES
Durch hinzufügen einer Abstraktion hängen höher- und niedrigstufige nun von dieser ab.
Man sieht ganz klar wo die Inversion stattfindet.
Anstatt das wir auf alle zeigen, lassen wir die Anderen auf unsere Abstraktion zeigen.

Wir durchbrechen die Abhängigkeitskette!!!
#+END_NOTES

** moving dependencies
#+BEGIN_SRC plantuml :file dip_03.png
namespace services {
    interface compressable
    compressable <|-- addressbook_compressor
    compressable <|-- mail_compressor
}

namespace buisness_logic {
    compress_controller --> services.compressable
}
#+END_SRC

#+RESULTS:
[[file:dip_03.png]]

** moving dependencies
#+BEGIN_SRC plantuml :file dip_04.png
namespace buisness_logic {
    interface compressable
    compress_controller --> compressable
}

namespace services {
    buisness_logic.compressable <|-- addressbook_compressor
    buisness_logic.compressable <|-- mail_compressor
}
#+END_SRC

#+RESULTS:
[[file:dip_04.png]]

** moving dependencies
#+BEGIN_SRC plantuml :file dip_05.png
namespace services {
    interface compressable
    compress_controller --> compressable
}

namespace buisness_logic {
    interface compressable
    compressable <|-- addressbook_compressor
    compressable <|-- mail_compressor
}

namespace adapter {
    mail_compress_service --> buisness_logic.mail_compressor
    mail_compress_service --> services.compress_controller
    mail_compress_service --> compress_adapter
    compress_adapter --> buisness_logic.compressable
    services.compressable <|-- compress_adapter
}
#+END_SRC

#+RESULTS:
[[file:dip_05.png]]

** violations
- variable has reference to a concrete class
- class derives from a concrete class
- class is not testable

#+BEGIN_NOTES
Es ist immer besser von Abstraktionen abzuhängen
Losen Kopplung
Es sollte die passende Abstraktion sein
Wenn Methode einer Basisklasse überschrieben wird dann passt die Abstraktion nicht

100% Einhaltung unmöglich – Es sind nur Richtlinien
#+END_NOTES

* Uncle Bob
- clean code book
- clean code kino
